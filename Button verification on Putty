#include <stdint.h>
#include "tm4c123gh6pm.h"
#include <stdio.h>
#include <stdlib.h>

#define GREEN_LED   (1U << 3)  // PF3 (Green LED)
#define RED_LED     (1U << 1)  // PF1 (Red LED)
#define BUTTON      (1U << 4)  // PF4 (Button for verification)

// Function Prototypes
void delayMilliseconds(uint32_t ms);
void PortF_Init(void);
int Button_Verify(void);

int main(void) {
    PortF_Init();  // Initialize GPIO for LED and Button
    
    while (1) {
        if (Button_Verify() == 1234) {
            GPIO_PORTF_DATA_R = GREEN_LED; // Turn ON Green LED (correct code)
        } else {
            GPIO_PORTF_DATA_R = RED_LED;   // Turn ON Red LED (wrong code)
        }
        
        delayMilliseconds(2000); // Wait for 2 seconds before next read
    }
}

// Initialize Port F for LED and Button
void PortF_Init(void) {
    SYSCTL_RCGCGPIO_R |= (1U << 5);  // Enable Clock for Port F
    while ((SYSCTL_PRGPIO_R & (1U << 5)) == 0);

    GPIO_PORTF_DIR_R |= (GREEN_LED | RED_LED);  // Set LEDs as Output
    GPIO_PORTF_DIR_R &= ~BUTTON;       // Set PF4 as Input (Button)
    GPIO_PORTF_DEN_R |= (GREEN_LED | RED_LED | BUTTON); // Enable Digital Function
    GPIO_PORTF_PUR_R |= BUTTON;        // Enable Pull-up Resistor on PF4
}

// Button verification function
int Button_Verify(void) {
    int code = 0;
    while ((GPIO_PORTF_DATA_R & BUTTON) == 0) { // Button pressed
        delayMilliseconds(500);
        code = (code * 10) + 1;
        if (code > 1234) break;
    }
    return code;
}

// Millisecond delay function
void delayMilliseconds(uint32_t ms) {
    uint32_t i;
    for (i = 0; i < (ms * 4000); i++) {
        __asm("NOP");
    }
}
