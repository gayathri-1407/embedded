#include <stdint.h>
#include "tm4c123gh6pm.h"

#define RS  (1U << 2)  // PA2
#define RW  (1U << 3)  // PA3
#define EN  (1U << 4)  // PA4

void delay_ms(int n);
void LCD_Command(unsigned char command);
void LCD_Data(unsigned char data);
void LCD_Init(void);
void LCD_String(char *str);

void PortA_Init(void);
void PortB_Init(void);

int main(void) {
    PortA_Init();  // Initialize Control Port (PA2, PA3, PA4)
    PortB_Init();  // Initialize Data Port (PB4-PB7)
    LCD_Init();    // Initialize LCD
    
    LCD_Command(0x80); // Move to first line
    LCD_String("Kiot");
    
    LCD_Command(0xC0); // Move to second line
    LCD_String("Visteon");
    
    while (1);
}

void PortA_Init(void) {
    SYSCTL_RCGCGPIO_R |= (1U << 0);  // Enable Clock for Port A
    while ((SYSCTL_PRGPIO_R & (1U << 0)) == 0);
    GPIO_PORTA_DIR_R |= (RS | RW | EN);
    GPIO_PORTA_DEN_R |= (RS | RW | EN);
}

void PortB_Init(void) {
    SYSCTL_RCGCGPIO_R |= (1U << 1);  // Enable Clock for Port B
    while ((SYSCTL_PRGPIO_R & (1U << 1)) == 0);
    GPIO_PORTB_DIR_R |= 0xF0;  // PB4-PB7 as Output
    GPIO_PORTB_DEN_R |= 0xF0;  // Enable Digital Function
}

void LCD_Init(void) {
    delay_ms(20);
    LCD_Command(0x30);
    delay_ms(5);
    LCD_Command(0x30);
    delay_ms(1);
    LCD_Command(0x30);
    LCD_Command(0x28);
    LCD_Command(0x0C);
    LCD_Command(0x06);
    LCD_Command(0x01);
}

void LCD_Command(unsigned char command) {
    GPIO_PORTA_DATA_R = 0x00; // RS=0, RW=0 (Command Mode)
    GPIO_PORTB_DATA_R = (command & 0xF0); // Send Upper Nibble
    GPIO_PORTA_DATA_R |= EN; // Enable High
    delay_ms(1);
    GPIO_PORTA_DATA_R &= ~EN; // Enable Low

    GPIO_PORTB_DATA_R = (command << 4) & 0xF0; // Send Lower Nibble
    GPIO_PORTA_DATA_R |= EN;
    delay_ms(1);
    GPIO_PORTA_DATA_R &= ~EN;
    delay_ms(2);
}

void LCD_Data(unsigned char data) {
    GPIO_PORTA_DATA_R = RS; // RS=1 (Data Mode), RW=0
    GPIO_PORTB_DATA_R = (data & 0xF0); // Send Upper Nibble
    GPIO_PORTA_DATA_R |= EN; // Enable High
    delay_ms(1);
    GPIO_PORTA_DATA_R &= ~EN; // Enable Low

    GPIO_PORTB_DATA_R = (data << 4) & 0xF0; // Send Lower Nibble
    GPIO_PORTA_DATA_R |= EN;
    delay_ms(1);
    GPIO_PORTA_DATA_R &= ~EN;
    delay_ms(2);
}

void LCD_String(char *str) {
    while (*str) {
        LCD_Data(*str++);
    }
}

void delay_ms(int n) {
    volatile int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < 3180; j++) {}
    }
}
