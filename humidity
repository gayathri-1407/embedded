#include <stdint.h>
#include "tm4c123gh6pm.h"
#include <stdio.h>

#define DHT11_PIN   (1U << 6)  // PB6 (Data Pin for DHT11)
#define BLUE_LED    (1U << 2)  // PF2 (Blue LED)
#define RED_LED     (1U << 1)  // PF1 (Red LED)
#define YELLOW_LED  (1U << 3)  // PF3 (Yellow LED)

// Function Prototypes
void delayMicroseconds(uint32_t us);
void delayMilliseconds(uint32_t ms);
void PortB_Init(void);
void PortF_Init(void);
void UART0_Init(void);
void UART0_SendString(char *str);
uint8_t DHT11_ReadByte(void);
void DHT11_Start(void);
void DHT11_GetData(uint8_t *humidity, uint8_t *temperature);

int main(void) {
    char buffer[30];
    uint8_t humidity, temperature;
    
    PortB_Init();           // Initialize GPIO for DHT11
    PortF_Init();           // Initialize GPIO for LEDs
    UART0_Init();           // Initialize UART0 for serial communication
    
    while (1) {
        DHT11_GetData(&humidity, &temperature);

        snprintf(buffer, sizeof(buffer), "Humidity: %u%%, Temp: %uC\r\n", humidity, temperature);
        UART0_SendString(buffer);

        GPIO_PORTF_DATA_R &= ~(BLUE_LED | RED_LED | YELLOW_LED); // Turn OFF all LEDs
        
        if (humidity > 50) {  // High Humidity
            GPIO_PORTF_DATA_R |= BLUE_LED;
        } else if (humidity >= 40 && humidity <= 50) { // Normal Humidity
            GPIO_PORTF_DATA_R |= RED_LED;
        } else {  // Low Humidity
            GPIO_PORTF_DATA_R |= YELLOW_LED;
        }

        delayMilliseconds(2000); // Wait for 2 seconds before next read
    }
}

// Initialize Port B for DHT11
void PortB_Init(void) {
    SYSCTL_RCGCGPIO_R |= (1U << 1);  // Enable Clock for Port B
    while ((SYSCTL_PRGPIO_R & (1U << 1)) == 0);

    GPIO_PORTB_DIR_R |= DHT11_PIN;  // Set PB6 as Output
    GPIO_PORTB_DEN_R |= DHT11_PIN;  // Enable Digital Function
}

// Initialize Port F for LEDs
void PortF_Init(void) {
    SYSCTL_RCGCGPIO_R |= (1U << 5);  // Enable Clock for Port F
    while ((SYSCTL_PRGPIO_R & (1U << 5)) == 0);

    GPIO_PORTF_DIR_R |= (BLUE_LED | RED_LED | YELLOW_LED);  // Set PF1, PF2, PF3 as Output
    GPIO_PORTF_DEN_R |= (BLUE_LED | RED_LED | YELLOW_LED);  // Enable Digital Function
}

// Initialize UART0 for serial communication
void UART0_Init(void) {
    SYSCTL_RCGCUART_R |= (1U << 0); // Enable UART0
    SYSCTL_RCGCGPIO_R |= (1U << 0); // Enable Clock for Port A
    
    while ((SYSCTL_PRUART_R & (1U << 0)) == 0);
    while ((SYSCTL_PRGPIO_R & (1U << 0)) == 0);
    
    GPIO_PORTA_AFSEL_R |= (1U << 1) | (1U << 0); // Enable alternate functions for PA0, PA1
    GPIO_PORTA_PCTL_R = (1U << 0) | (1U << 4);  // Configure PA0, PA1 for UART
    GPIO_PORTA_DEN_R |= (1U << 1) | (1U << 0); // Enable digital function
    
    UART0_CTL_R &= ~(1U << 0); // Disable UART0
    UART0_IBRD_R = 104;        // 16MHz / (16 * 9600) = 104.1667
    UART0_FBRD_R = 11;         // Fractional part 0.1667 * 64 + 0.5 = 11
    UART0_LCRH_R = (0x3 << 5); // 8-bit, no parity, 1-stop bit
    UART0_CC_R = 0x0;          // Use system clock
    UART0_CTL_R |= (1U << 0) | (1U << 8) | (1U << 9); // Enable UART0, TXE, RXE
}

// Function to send a string via UART0
void UART0_SendString(char *str) {
    while (*str) {
        while ((UART0_FR_R & (1U << 5)) != 0); // Wait until TX buffer is empty
        UART0_DR_R = *str;
        str++;
    }
}

// Send Start Signal to DHT11
void DHT11_Start(void) {
    GPIO_PORTB_DIR_R |= DHT11_PIN;  // Set PB6 as output
    GPIO_PORTB_DATA_R &= ~DHT11_PIN; // Pull LOW for 18ms
    delayMilliseconds(18);
    GPIO_PORTB_DATA_R |= DHT11_PIN;  // Pull HIGH for 20-40Âµs
    delayMicroseconds(40);
    GPIO_PORTB_DIR_R &= ~DHT11_PIN;  // Set PB6 as input
}

// Read One Byte from DHT11
uint8_t DHT11_ReadByte(void) {
    uint8_t data = 0;
    for (int i = 0; i < 8; i++) {
        while (!(GPIO_PORTB_DATA_R & DHT11_PIN)); // Wait for HIGH
        delayMicroseconds(30);
        if (GPIO_PORTB_DATA_R & DHT11_PIN) 
            data |= (1 << (7 - i)); // Read Bit
        while (GPIO_PORTB_DATA_R & DHT11_PIN); // Wait for LOW
    }
    return data;
}

// Read Data from DHT11
void DHT11_GetData(uint8_t *humidity, uint8_t *temperature) {
    uint8_t humInt, humDec, tempInt, tempDec, checksum;
    
    DHT11_Start();

    if (!(GPIO_PORTB_DATA_R & DHT11_PIN)) {
        while (GPIO_PORTB_DATA_R & DHT11_PIN);  // Wait for LOW
        while (!(GPIO_PORTB_DATA_R & DHT11_PIN)); // Wait for HIGH
        while (GPIO_PORTB_DATA_R & DHT11_PIN);  // Wait for LOW

        humInt = DHT11_ReadByte();
        humDec = DHT11_ReadByte();
        tempInt = DHT11_ReadByte();
        tempDec = DHT11_ReadByte();
        checksum = DHT11_ReadByte();

        if ((humInt + humDec + tempInt + tempDec) == checksum) {
            *humidity = humInt;
            *temperature = tempInt;
        }
    }
}
